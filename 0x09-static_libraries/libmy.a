!<arch>
0-isupper.c/    0           0     0     644     279       `
#include "main.h"

/**
 * _isupper - checks if the character is uppercase
 * @c: is the int used for the argument of the function.
 * Return: 1 if uppercase character 0 if not
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     287       `
#include "main.h"

/**
 * _memset - fills n bytes
 * @s: pointer to the char parameters
 * @b: data to change
 * @n: index
 * Return: *s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     340       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: pointer destination
 * @src: source of pointer
 * Return: void
 */
char *_strcat(char *dest, char *src)
{
	int a = -1, i;

	for (i = 0; dest[i] != '\0'; i++)
	;
	do {
		a++;
		dest[i] = src[a];
		i++;
	} while (src[a] != '\0');

	return (dest);
}
100-atoi.c/     0           0     0     644     467       `
#include "main.h"

/**
 * _atoi - convert a string to an integer.
 * @s: char type string
 * Return: integer converted
 */

int _atoi(char *s)
{
	int i;
	int res = 0;
	int sig = -1;
	int brk = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
			sig = sig * -1;
		if (s[i] >= '0' && s[i] <= '9')
		{
			res = res * 10;
			res -= (s[i] - '0');
			brk = 1;
		}
		else if (brk == 1)
			break;
	}
	res = sig * res;
	return (res);
}

1-isdigit.c/    0           0     0     644     197       `
#include "main.h"

/**
 * _isdigit - prints the code
 * @c: int to be checked
 * Return: successful digit is 1 is 0 otherwise
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

1-memcpy.c/     0           0     0     644     344       `
#include "main.h"

/**
 * _memcpy - copies n bytes to the pointer of a pointer
 * @dest: pointer to char parameters
 * @src: pointer to char params
 * @n: size
 * Return: *dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}
1-strncat.c/    0           0     0     644     490       `
#include "main.h"

/**
 * *_strncat - oncatenates n bytes of two strings
 * @dest: pointer destination
 * @src: pointer source
 * @n: number of bytes
 * Return: void
 */
char *_strncat(char *dest, char *src, int n)
{
	int dest_leng, i;

	for (dest_leng = 0; dest[dest_leng] != '\0'; dest_leng++)
	;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[dest_leng + i] = src[i];

	/*should end with a end of string char*/
	dest[dest_leng + i] = '\0';

	return (dest);
}
2-strchr.c/     0           0     0     644     310       `
#include "main.h"

/**
 * _strchr - prints found c
 * @s: pointer to the char
 * @c: char parameters to be found
 * Return: *s
 */
char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}
	if (*s == c)
	{
		return (s);
	}

	return (0);
}
2-strlen.c/     0           0     0     644     194       `
#include "main.h"
/**
* _strlen - find the length of a string
* @s: pointer to the string to check
* Return: void
*/



int _strlen(char *s)
{


	int i = 0;
	while (s[i])
		i++;
	return (i);

}
2-strncpy.c/    0           0     0     644     355       `
#include "main.h"

/**
 * *_strncpy - finds the length of the string
 * @dest: pointer to the string
 * @src: pointer
 * @n: int
 * Return: destination
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];

	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     191       `
#include "main.h"

/**
 * _islower - checks for lower case letter
 * @c : character to check the case
 * Return:0 or 1
 */
int _islower(int c)
{
	return (c >= 97 && c <= 122);

}

3-puts.c/       0           0     0     644     241       `
#include "main.h"
/**
 * _puts - prints a string, followed by a new line,
 * @str: pointer to the string to print
 * Return: void
*/


void _puts(char *str)
{
	int i = 0;

	while (str[i])
	{
		_putchar(str[i]);
		i++;
	}

	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     347       `
#include "main.h"

/**
 * _strcmp - compares 2 strings
 * @s1: 1st string
 * @s2: 2nd string
 * Return: 0 if matching, and ns1 - ns2 if not matching
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
	}

	return (0);
}

3-strspn.c/     0           0     0     644     470       `
#include "main.h"

/**
 * _strspn - gets the length of the prefix substring
 * @s: string where substring will look
 * @accept: substring of accepred chars
 * Return: length of occurance
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int c = 0;
	char *t = accept;

	while (*s++)
	{
		while (*accept++)
			if (*(s - 1) == *(accept - 1))
			{
				c++;
				break;
			}
		if (!(*--accept))
			break;
		accept = t;
	}

	return (c);
}
4-isalpha.c/    0           0     0     644     210       `
#include "main.h"
/**
 * _isalpha - checks if the letter is lower case
 * @c : character to check
 * Return:0 or 1
 */
int _isalpha(int c)
{
	return ((c >= 97 && c <= 122) || (c >= 65 && c <= 90));
}
4-strpbrk.c/    0           0     0     644     335       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - bytes
 * @s: char pointer
 * @accept: char pointer
 * Return: Null
 */
char *_strpbrk(char *s, char *accept)
{
	int a;

	while (*s)
	{
		for (a = 0; accept[a]; a++)
		{
			if (*s == accept[a])
			{
				return (s);
			}
		}
		s++;
	}

	return (NULL);
}

5-strstr.c/     0           0     0     644     469       `
#include "main.h"

/**
 * _strstr - function locate
 * @haystack: pointer to char
 * @needle: pointer to char
 * Return: 0
 */
char *_strstr(char *haystack, char *needle)
{
	char *result = haystack, *fneedle = needle;

	while (*haystack)
	{
		while (*needle)
		{
			if (*haystack++ != *needle++)
			{
				break;
			}
		}
		if (!*needle)
		{
			return (result);
		}
		needle = fneedle;
		result++;
		haystack = result;
	}

	return (0);
}

6-abs.c/        0           0     0     644     162       `
#include "main.h"

/**
 * _abs - return value
 * @n : the number to be checked
 * Return:0 or 1
 */
int _abs(int n)
{
	return (n >= 0 ? n : n * -1);
}
9-strcpy.c/     0           0     0     644     413       `
#include "main.h"

/**
 * *_strcpy -  copies the string pointed to by src
 * @dest: char type string
 * @src: char type string
 * Description: Copy the string pointed to by pointer `src` to
 * the buffer pointed to by `dest`
 * Return: Pointer to `dest`
 */

char *_strcpy(char *dest, char *src)
{
	int i = -1;

	do {
		i++;
		dest[i] = src[i];
	} while (src[i] != '\0');

	return (dest);
}

_putchar.c/     0           0     0     644     254       `
#include <unistd.h>

/**
 * _putchar - writes c character in the stdout
 * @c: its the character to be printed
 * Return: On success 1
 * On error, return -1 and set error appropriately
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
